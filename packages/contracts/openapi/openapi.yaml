openapi: 3.1.0
info:
  title: Visitor Management System API
  description: Production-grade multi-tenant visitor management system
  version: 1.0.0
  contact:
    name: VMS API Support
    email: api-support@visitormate.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.visitormate.com/v1
    description: Production server
  - url: https://staging-api.visitormate.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags: [System]
      summary: Health check endpoint
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time

  # Authentication
  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required: [refresh_token]
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Organizations
  /organizations:
    get:
      tags: [Organizations]
      summary: List organizations (admin only)
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
        '403':
          $ref: '#/components/responses/Forbidden'

  /organizations/{orgId}:
    get:
      tags: [Organizations]
      summary: Get organization details
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          $ref: '#/components/responses/NotFound'

  # Locations
  /organizations/{orgId}/locations:
    get:
      tags: [Locations]
      summary: List locations
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'

    post:
      tags: [Locations]
      summary: Create location
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationRequest'
      responses:
        '201':
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/BadRequest'

  # Employees
  /organizations/{orgId}/employees:
    get:
      tags: [Employees]
      summary: List employees
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          schema:
            $ref: '#/components/schemas/EmployeeRole'
        - name: is_host
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Employees retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListResponse'

    post:
      tags: [Employees]
      summary: Create employee
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeRequest'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'

  # Visitors
  /organizations/{orgId}/visitors:
    get:
      tags: [Visitors]
      summary: List visitors
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: search
          in: query
          description: Search by name, email, or company
          schema:
            type: string
      responses:
        '200':
          description: Visitors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorListResponse'

    post:
      tags: [Visitors]
      summary: Create visitor
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVisitorRequest'
      responses:
        '201':
          description: Visitor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'

  # Visits
  /organizations/{orgId}/visits:
    get:
      tags: [Visits]
      summary: List visits
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/VisitStatus'
        - name: location_id
          in: query
          schema:
            type: string
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Visits retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitListResponse'

    post:
      tags: [Visits]
      summary: Create visit
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVisitRequest'
      responses:
        '201':
          description: Visit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'

  /organizations/{orgId}/visits/{visitId}/check-in:
    post:
      tags: [Visits]
      summary: Check in visitor
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/VisitIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckInRequest'
      responses:
        '200':
          description: Visitor checked in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'

  /organizations/{orgId}/visits/{visitId}/check-out:
    post:
      tags: [Visits]
      summary: Check out visitor
      parameters:
        - $ref: '#/components/parameters/OrgIdParam'
        - $ref: '#/components/parameters/VisitIdParam'
      responses:
        '200':
          description: Visitor checked out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'

  # Kiosk Session
  /kiosk/session:
    post:
      tags: [Kiosk]
      summary: Initialize kiosk session
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KioskSessionRequest'
      responses:
        '200':
          description: Kiosk session initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KioskSessionResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    OrgIdParam:
      name: orgId
      in: path
      required: true
      schema:
        type: string
      description: Organization ID

    VisitIdParam:
      name: visitId
      in: path
      required: true
      schema:
        type: string
      description: Visit ID

    CursorParam:
      name: cursor
      in: query
      schema:
        type: string
      description: Cursor for pagination

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items to return

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Base schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
          required: [code, message]
      required: [error]

    PaginationMeta:
      type: object
      properties:
        has_next:
          type: boolean
        next_cursor:
          type: string
          nullable: true
        total_count:
          type: integer
          nullable: true
      required: [has_next]

    # Enums
    EmployeeRole:
      type: string
      enum: [ADMIN, RECEPTIONIST, SECURITY, MANAGER]

    EmployeeStatus:
      type: string
      enum: [ACTIVE, INACTIVE, SUSPENDED]

    VisitPurpose:
      type: string
      enum: [MEETING, INTERVIEW, DELIVERY, GUEST, OTHER]

    VisitStatus:
      type: string
      enum: [PRE_REGISTERED, CHECKED_IN, CHECKED_OUT, NO_SHOW]

    # Auth schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        org_slug:
          type: string
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/Employee'
      required: [access_token, refresh_token, expires_in, user]

    # Core entities
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        plan:
          type: string
          enum: [STARTER, PROFESSIONAL, ENTERPRISE]
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, name, slug, plan, created_at, updated_at]

    Location:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        name:
          type: string
        time_zone:
          type: string
        address:
          type: object
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, org_id, name, time_zone, created_at, updated_at]

    Employee:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        location_id:
          type: string
          nullable: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        role:
          $ref: '#/components/schemas/EmployeeRole'
        is_host:
          type: boolean
        status:
          $ref: '#/components/schemas/EmployeeStatus'
        avatar_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, org_id, first_name, last_name, email, role, is_host, status, created_at, updated_at]

    Visitor:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        company:
          type: string
          nullable: true
        photo_url:
          type: string
          nullable: true
        preferred_language:
          type: string
        notes:
          type: string
          nullable: true
        marketing_opt_in:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, org_id, first_name, last_name, preferred_language, marketing_opt_in, created_at, updated_at]

    Visit:
      type: object
      properties:
        id:
          type: string
        org_id:
          type: string
        location_id:
          type: string
        visitor_id:
          type: string
        host_employee_id:
          type: string
          nullable: true
        purpose:
          $ref: '#/components/schemas/VisitPurpose'
        pre_registered:
          type: boolean
        scheduled_start:
          type: string
          format: date-time
          nullable: true
        check_in_time:
          type: string
          format: date-time
          nullable: true
        check_out_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/VisitStatus'
        badge_number:
          type: string
          nullable: true
        qr_code:
          type: string
          nullable: true
        metadata:
          type: object
        visitor:
          $ref: '#/components/schemas/Visitor'
        host_employee:
          $ref: '#/components/schemas/Employee'
          nullable: true
        location:
          $ref: '#/components/schemas/Location'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, org_id, location_id, visitor_id, purpose, pre_registered, status, visitor, location, created_at, updated_at]

    # Request schemas
    CreateLocationRequest:
      type: object
      properties:
        name:
          type: string
        time_zone:
          type: string
        address:
          type: object
        settings:
          type: object
      required: [name]

    CreateEmployeeRequest:
      type: object
      properties:
        location_id:
          type: string
          nullable: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        role:
          $ref: '#/components/schemas/EmployeeRole'
        is_host:
          type: boolean
        avatar_url:
          type: string
          nullable: true
      required: [first_name, last_name, email, role]

    CreateVisitorRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        company:
          type: string
          nullable: true
        preferred_language:
          type: string
        notes:
          type: string
          nullable: true
        marketing_opt_in:
          type: boolean
      required: [first_name, last_name]

    CreateVisitRequest:
      type: object
      properties:
        location_id:
          type: string
        visitor_id:
          type: string
        host_employee_id:
          type: string
          nullable: true
        purpose:
          $ref: '#/components/schemas/VisitPurpose'
        pre_registered:
          type: boolean
        scheduled_start:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
      required: [location_id, visitor_id, purpose]

    CheckInRequest:
      type: object
      properties:
        kiosk_device_id:
          type: string
          nullable: true
        badge_number:
          type: string
          nullable: true
        photo_url:
          type: string
          nullable: true
        agreements:
          type: array
          items:
            type: object
            properties:
              agreement_id:
                type: string
              signature_blob_url:
                type: string
                nullable: true
            required: [agreement_id]

    KioskSessionRequest:
      type: object
      properties:
        device_identifier:
          type: string
        location_id:
          type: string
        app_version:
          type: string
          nullable: true
      required: [device_identifier, location_id]

    KioskSessionResponse:
      type: object
      properties:
        session_token:
          type: string
        device:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            settings:
              type: object
        location:
          $ref: '#/components/schemas/Location'
        agreements:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              content_md:
                type: string
              is_required:
                type: boolean
              type:
                type: string
                enum: [NDA, SAFETY, PRIVACY]
      required: [session_token, device, location, agreements]

    # List response schemas
    OrganizationListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required: [data, meta]

    LocationListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required: [data, meta]

    EmployeeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required: [data, meta]

    VisitorListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Visitor'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required: [data, meta]

    VisitListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Visit'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required: [data, meta]