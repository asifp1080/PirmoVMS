version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vms-postgres
    environment:
      POSTGRES_DB: vms_dev
      POSTGRES_USER: vms_user
      POSTGRES_PASSWORD: vms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vms_user -d vms_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: vms-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /maildir
    volumes:
      - mailhog_data:/maildir

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: vms-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Service
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: vms-api
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://vms_user:vms_password@postgres:5432/vms_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev_jwt_secret_change_in_production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      CORS_ORIGINS: http://localhost:3000
      # Email settings
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
      SMTP_FROM: noreply@vms.local
      # File storage
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: vms-uploads
      MINIO_USE_SSL: false
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages:/packages
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: npm run start:dev

  # Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: vms-web
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://localhost:3001/api/v1
      VITE_APP_NAME: VMS Development
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    command: npm run dev

  # Database migrations runner
  migrate:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: vms-migrate
    environment:
      DATABASE_URL: postgresql://vms_user:vms_password@postgres:5432/vms_dev
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run db:migrate
    profiles:
      - tools

  # Database seeder
  seed:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: vms-seed
    environment:
      DATABASE_URL: postgresql://vms_user:vms_password@postgres:5432/vms_dev
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run db:seed
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  mailhog_data:
  minio_data:

networks:
  default:
    name: vms-network